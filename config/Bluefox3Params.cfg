#!/usr/bin/env python

PACKAGE='bluefox3'
import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator();

acq = gen.add_group("Acquisition control parameters");
acq.add("acq_exposure_time", double_t, 1, "Exposure time (us)", 10.0, 0.0, 100000.0);
# acq_expmode_enum = gen.enum([ 
#                         gen.const("Off", str_t, "Off", "Disables the Exposure and let the shutter open."),
#                         gen.const("Timed", str_t, "Timed", "Timed exposure. The exposure duration time is set using the ExposureTime or ExposureAuto features and the exposure starts with the FrameStart or LineStart."),
#                         gen.const("TriggerWidth", str_t, "TriggerWidth", "Uses the width of the current Frame or Line trigger signal(s) pulse to control the exposure duration. Note that if the Frame or Line TriggerActivation is RisingEdge or LevelHigh, the exposure duration will be the time the trigger stays High. If TriggerActivation is FallingEdge or LevelLow, the exposure time will last as long as the trigger stays Low."),
#                         gen.const("TriggerControlled", str_t, "TriggerControlled", "Uses one or more trigger signal(s) to control the exposure duration independently from the current Frame or Line triggers. See ExposureStart, ExposureEnd and ExposureActive of the TriggerSelector feature."),
#                         gen.const("mvMultiZone", str_t, "mvMultiZone", "The exposure duration time can be configured individually for different zones within the image by setting the 'ExposureTimeSelector' to one of the 'mvHorizontalZone' values. This mode will only have effect on the image when operating the device in a 'mvMultiAreaMode' different from 'mvOff'."),
#                         ],
#                         "exposure mode")
# acq.add("acq_exposure_mode", str_t, 0, "exposure mode", "Timed", edit_method=acq_expmode_enum)
acq_autoexp_enum = gen.enum([ 
                        gen.const("aeOff", str_t, "Off", "Exposure duration is user controlled using ExposureTime."),
                        gen.const("aeOnce", str_t, "Once", "Exposure duration is adapted once by the device. Once it has converged, it returns to the Off state."),
                        gen.const("aeContinuous", str_t, "Continuous", "Exposure duration is constantly adapted by the device to maximize the dynamic range."),
                        gen.const("aemvSequenced", str_t, "mvSequenced", "this shit is undocumented, so I dunno what it does"),
                        ],
                        "automatic exposure time")
acq.add("acq_exposure_AECMode", str_t, 0, "automatic exposure time", "Continuous", edit_method=acq_autoexp_enum)

mm = gen.add_group("Mirroring parameters");
mm.add("mm_TopDown", bool_t, 1, "Top-down mirroring", False);
mm.add("mm_LeftRight", bool_t, 1, "Left-right mirroring", False);
# mm_enum = gen.enum([ 
#                         gen.const("mmOff", str_t, "Off", "No Mirroring."),
#                         gen.const("mmTopDown", str_t, "TopDown", "The resulting image will be flipped around a horizontal axis."),
#                         gen.const("mmLeftRight", str_t, "LeftRight", "The resulting image will be both around a horizontal and vertical axis."),
#                         gen.const("mmTopDownAndLeftRight", str_t, "TopDown&LeftRight", "The resulting image will be both around a horizontal and vertical axis."),
#                         ],
#                         "mirroring mode")
# mm.add("mirror_mode", str_t, 0, "mirroring mode", "Off", edit_method=mm_enum)

exit(gen.generate(PACKAGE, "bluefox3", "Bluefox3"))
